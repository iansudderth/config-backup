{
  /*
      // Place your snippets for Javascript (Babel) here. Each snippet is defined under a snippet name and has a prefix, body and 
      // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
      // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
      // same ids are connected.
      // Example:
      "Print to console": {
          "prefix": "log",
          "body": [
              "console.log('$1');",
              "$2"
          ],
          "description": "Log output to console"
      }
  */
  "React Functional Component": {
    "prefix": "react-functional-component",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "const ${1:name} = (props) => {",
      "	return (",
      "		<div>{props.children}</div>",
      "		)",
      "}",
      "",
      "${1:name}.propTypes = {}",
      "",
      "${1:name}.defaultProps = {}",
      "",
      "export default ${1:name}"
    ],
    "description": "Functional React Component"
  },
  "React-Redux Connected Functional Component": {
    "prefix": "react-redux-functional",
    "body": [
      "import React from 'react';",
      "import { connect } from 'react-redux';",
      "import { bindActionCreators } from 'redux';",
      "",
      "const ${1:name} = props => {",
      "  return <div />;",
      "};",
      "",
      "${1:name}.propTypes = {}",
      "",
      "${1:name}.defaultProps = {}",
      "",
      "const mapStateToProps = ({ reducers }) => ({ reducers });",
      "",
      "const mapDispatchToProps = dispatch =>",
      "  bindActionCreators({ actions }, dispatch);",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:name});"
    ],
    "description": "Functional Redux Connected React Component"
  },
  "React-Redux Connected Stateful Component": {
    "prefix": "react-redux-stateful",
    "body": [
      "import React, { Component } from 'react';",
      "import { connect } from 'react-redux';",
      "import { bindActionCreators } from 'redux';",
      "",
      "class ${1:name} extends Component {",
      "  constructor(props) {",
      "	super(props);",
      "	this.state = {};",
      "  }",
      "",
      "  render() {",
      "	return <div />;",
      "  }",
      "}",
      "",
      "${1:name}.propTypes = {};",
      "",
      "${1:name}.defaultProps = {};",
      "",
      "const mapStateToProps = ({ reducers }) => ({ reducers });",
      "",
      "const mapDispatchToProps = dispatch =>",
      "  bindActionCreators({ actions }, dispatch);",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:name});"
    ],
    "description": "Stateful Redux Connected React Component"
  },
  "React Stateful Component": {
    "prefix": "react-stateful-component",
    "body": [
      "import React, { Component } from 'react';",
      "",
      "class ${1:name} extends Component {",
      "  constructor(props) {",
      "	super(props);",
      "	this.state = {};",
      "  }",
      "",
      "  render() {",
      "	return <div />;",
      "  }",
      "}",
      "",
      "${1:name}.propTypes = {};",
      "",
      "${1:name}.defaultProps = {};",
      "",
      "export default ${1:name};"
    ],
    "description": "Stateful React Component"
  },
  "Combine Reducers Boilerplate": {
    "prefix": "redux-combine-reducers",
    "body": [
      "import { combineReducers } from 'redux';",
      "",
      "const rootReducer = combineReducers({ reducers });",
      "",
      "export default rootReducer;"
    ],
    "description": "Boilerplate for Redux's combine reducers"
  },
  "Redux Store Boilerplate": {
    "prefix": "redux-store-boiler",
    "body": [
      "import React from 'react';",
      "import ReactDOM from 'react-dom';",
      "import { Provider } from 'react-redux';",
      "import { createStore } from 'redux';",
      "import App from './App';",
      "import combinedReducers from './redux/reducers';",
      "",
      "let store = createStore(combinedReducers);",
      "",
      "ReactDOM.render(",
      "  <Provider store={store}>",
      "	<App />",
      "  </Provider>,",
      "  document.getElementById('root')",
      ");"
    ],
    "description": "Boilerplate for creating a Redux store"
  },
  "Redux Reducer Boilerplate": {
    "prefix": "redux-reducer",
    "body": [
      "import { } from '../actions';",
      "",
      "const ${1:name} = (state = null, action) => {",
      "  switch (action.type) {",
      "    default: {",
      "      return state;",
      "    }",
      "  }",
      "};",
      "",
      "export default ${1:name};"
    ],
    "description": "Boilerplate for Redux Reducer"
  },
  "Redux Action Dispatcher": {
    "prefix": "redux-action-dispatch",
    "body": [
      "export const ${1:actionName} = '${1:actionName}';",
      "export const ${2:functionName} = () => ({",
      "  type: ${1:actionName},",
      "});"
    ]
  }
}
